<%= content_for :title, @quote ? "Quote for #{@discover_date.strftime('%B %d, %Y')}" : "Discover Quotes - #{@discover_date.strftime('%B %d, %Y')}" %>

<style>
  /* Main content styles */
  .main-content {
    width: 900px;
    margin: 0 auto;
    padding: 2rem;
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    flex: 1;
  }

  .discover-header {
    background: rgba(245, 240, 232, 0.95);
    border: 1px solid #8b7355;
    border-radius: 8px;
    padding: 1rem 2rem;
    margin-bottom: 2rem;
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    backdrop-filter: blur(4px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .discover-header h1 {
    margin: 0;
    color: #3d2c1d;
    font-size: 1.5rem;
  }

  .back-to-discover {
    background: #8b7355;
    color: white;
    padding: 0.5rem 1rem;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s ease;
  }

  .back-to-discover:hover {
    background: #6d5940;
    color: white;
  }

  .quote-card {
    background: rgba(245, 240, 232, 0.1);
    backdrop-filter: blur(2px);
    border-radius: 12px;
    padding: 3rem 2rem;
    margin-bottom: 2rem;
    border: 2px solid #8b7355;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    position: relative;
    width: 100%;
  }

  .quote-text {
    font-family: 'Crimson Text', serif;
    font-size: 1.75rem;
    line-height: 1.6;
    color: #3d2c1d;
    text-align: center;
    margin-bottom: 2rem;
    font-weight: 400;
    position: relative;
    padding: 0 1rem;
    letter-spacing: 0.01em;
  }

  .metadata-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-top: 2rem;
  }

  .metadata-item {
    background: rgba(212, 196, 168, 0.5);
    padding: 1rem;
    border-radius: 8px;
    border-left: 3px solid #8b7355;
    transition: all 0.2s ease;
  }

  .metadata-label {
    font-size: 0.75rem;
    font-weight: 600;
    color: #8b7355;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: block;
  }

  .metadata-value {
    color: #3d2c1d;
    font-size: 1rem;
  }

  .quote-engagement-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
    padding: 0 1rem;
    min-height: 2.5rem;
  }

  .quote-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
    flex: 1;
  }

  .quote-tags-placeholder {
    flex: 1;
  }

  .tag-badge {
    background: rgba(139, 115, 85, 0.1);
    color: #8b7355;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 500;
    border: 1px solid rgba(139, 115, 85, 0.2);
    white-space: nowrap;
  }

  .quote-engagement {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    z-index: 10;
  }

  .engagement-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.375rem;
    background: rgba(245, 240, 232, 0.95);
    border: 2px solid rgba(139, 115, 85, 0.3);
    border-radius: 50px;
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    color: #8b7355;
    font-weight: 500;
    backdrop-filter: blur(8px);
    min-width: 3rem;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    z-index: 2;
  }

  .engagement-btn:hover {
    background: rgba(245, 240, 232, 1);
    border-color: rgba(139, 115, 85, 0.5);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .engagement-btn:active {
    transform: translateY(0);
  }

  .engagement-btn.like-active {
    background: rgba(76, 175, 80, 0.1);
    border-color: #4caf50;
    color: #2e7d32;
  }

  .engagement-btn.like-active:hover {
    background: rgba(76, 175, 80, 0.2);
  }

  .engagement-btn.dislike-active {
    background: rgba(244, 67, 54, 0.1);
    border-color: #f44336;
    color: #c62828;
  }

  .engagement-btn.dislike-active:hover {
    background: rgba(244, 67, 54, 0.2);
  }

  .engagement-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    pointer-events: none;
  }

  .engagement-btn .thumb-icon svg {
    width: 16px;
    height: 16px;
    fill: currentColor;
  }

  .discover-notice {
    background: rgba(139, 115, 85, 0.1);
    color: #8b7355;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    margin-bottom: 1rem;
    text-align: center;
    font-style: italic;
    border: 1px solid rgba(139, 115, 85, 0.2);
  }

  .interaction-section {
    width: 100%;
    margin-top: 2rem;
  }

  .interaction-card {
    background: rgba(245, 240, 232, 0.1);
    backdrop-filter: blur(2px);
    border-radius: 12px;
    border: 2px solid #8b7355;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .comments-section {
    padding: 2rem;
  }

  .section-title {
    font-size: 1.5rem;
    color: #3d2c1d;
    margin-bottom: 1.5rem;
    font-weight: 600;
  }

  .comment-form {
    background: rgba(245, 240, 232, 0.5);
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    border: 1px solid rgba(139, 115, 85, 0.2);
  }

  .comment-form.disabled {
    opacity: 0.6;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #3d2c1d;
    font-weight: 500;
  }

  .form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #8b7355;
    border-radius: 4px;
    background: #fefcfa;
    color: #3d2c1d;
    font-family: inherit;
    resize: vertical;
  }

  .form-control:disabled {
    background: #f5f0e8;
    color: #8b7355;
    cursor: not-allowed;
  }

  .btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.3s ease;
  }

  .btn-primary {
    background: #8b7355;
    color: white;
  }

  .btn-primary:hover:not(:disabled) {
    background: #6d5940;
  }

  .btn:disabled {
    background: #ccc;
    cursor: not-allowed;
  }

  .comment-item {
    border-bottom: 1px solid rgba(139, 115, 85, 0.1);
    padding: 1.5rem 0;
  }

  .comment-item:last-child {
    border-bottom: none;
  }

  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .comment-author {
    font-weight: 600;
    color: #3d2c1d;
  }

  .comment-time {
    color: #8b7355;
    font-size: 0.85rem;
  }

  .comment-content {
    color: #3d2c1d;
    line-height: 1.6;
    margin: 0.75rem 0;
  }

  .comment-actions {
    display: flex;
    gap: 1rem;
    margin-top: 0.75rem;
  }

  .comment-action {
    background: none;
    border: none;
    color: #8b7355;
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.85rem;
    transition: background-color 0.3s ease;
  }

  .comment-action:hover {
    background: rgba(139, 115, 85, 0.1);
  }

  .comment-action:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .comment-action.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }

  .comment-replies {
    margin-left: 2rem;
    margin-top: 1rem;
  }

  .empty-message {
    text-align: center;
    color: #8b7355;
    font-style: italic;
    padding: 2rem;
  }

  .no-quote {
    text-align: center;
    padding: 3rem;
    color: #8b7355;
  }

  .no-quote h2 {
    color: #3d2c1d;
    margin-bottom: 1rem;
  }

  @media (max-width: 768px) {
    .main-content {
      width: 95%;
      padding: 1rem;
    }

    .quote-card {
      padding: 2rem 1.5rem;
    }

    .quote-text {
      font-size: 1.25rem;
    }

    .discover-header {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .metadata-section {
      flex-direction: column;
      gap: 1rem;
    }

    .quote-engagement-section {
      flex-direction: column;
      gap: 1rem;
    }

    .quote-tags {
      justify-content: flex-start;
      width: 100%;
    }

    .comment-replies {
      margin-left: 1rem;
    }
  }

  /* Comments Display Styles */
  .comments-list {
    margin-top: 2rem;
  }

  .comment {
    background: rgba(245, 240, 232, 0.3);
    border: 1px solid rgba(139, 115, 85, 0.3);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .comment-author {
    font-family: 'Crimson Text', serif;
    font-weight: 600;
    color: #3d2c1d;
  }

  .comment-date {
    font-size: 0.85rem;
    color: #8b7355;
    font-style: italic;
  }

  .comment-action {
    color: #8b7355;
    text-decoration: none;
    font-weight: 500;
  }

  .comment-action:hover {
    color: #3d2c1d;
    text-decoration: underline;
  }

  .comment-action.danger {
    color: #c53030;
  }

  .comment-action.danger:hover {
    color: #a02625;
  }

  .comment-depth-indicator {
    font-size: 0.75rem;
    color: #8b7355;
    font-style: italic;
    margin-left: 0.5rem;
  }

  .edit-indicator {
    font-size: 0.75rem;
    color: #8b7355;
    font-style: italic;
    margin-left: 1rem;
  }

  .delete-btn {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-size: 0.85rem;
  }

  /* Enhanced visual hierarchy for nested comments */
  .comment[data-depth="0"] {
    border-left: none;
    background: rgba(245, 240, 232, 0.2);
  }

  .comment[data-depth="1"] {
    border-left: 4px solid rgba(139, 115, 85, 0.6);
    background: rgba(245, 240, 232, 0.3);
    margin-left: 3rem !important;
    padding-left: 1.5rem;
  }

  .comment[data-depth="2"] {
    border-left: 4px solid rgba(139, 115, 85, 0.7);
    background: rgba(245, 240, 232, 0.4);
    margin-left: 6rem !important;
    padding-left: 1.5rem;
  }

  .comment[data-depth="3"] {
    border-left: 4px solid rgba(139, 115, 85, 0.8);
    background: rgba(245, 240, 232, 0.5);
    margin-left: 9rem !important;
    padding-left: 1.5rem;
  }

  .comment[data-depth="4"] {
    border-left: 4px solid rgba(139, 115, 85, 0.9);
    background: rgba(245, 240, 232, 0.6);
    margin-left: 12rem !important;
    padding-left: 1.5rem;
  }

  /* Responsive adjustments for mobile */
  @media (max-width: 768px) {
    .comment[data-depth="1"] { margin-left: 1.5rem !important; }
    .comment[data-depth="2"] { margin-left: 3rem !important; }
    .comment[data-depth="3"] { margin-left: 4.5rem !important; }
    .comment[data-depth="4"] { margin-left: 6rem !important; }
  }
</style>

<main class="main-content">
  <%# Temporarily using debug view -%>
<%= render 'show_debug' %>
    <div class="discover-header">
      <h1>Quote for <%= @discover_date.strftime('%B %d, %Y') %></h1>
    </div>

    <div class="discover-notice">
      This quote was last featured on <%= @discover_date.strftime('%B %d, %Y') %>. 
      <%= link_to "View today's quote", root_path, 
                  style: "color: #8b7355; font-weight: 500;", 
                  onmouseover: "this.style.color='#6d5940'", 
                  onmouseout: "this.style.color='#8b7355'" %>.
    </div>

    <!-- Main Quote Card -->
    <div class="quote-card">
      <blockquote class="quote-text">
        <%= @quote.text %>
      </blockquote>

      <div class="metadata-section">
        <% if @quote.book.present? %>
          <div class="metadata-item">
            <span class="metadata-label">Book</span>
            <span class="metadata-value"><%= @quote.book %></span>
          </div>
        <% end %>
        <% if @quote.chapter.present? %>
          <div class="metadata-item">
            <span class="metadata-label">Chapter</span>
            <span class="metadata-value"><%= @quote.chapter %></span>
          </div>
        <% end %>
        <% if @quote.context.present? %>
          <div class="metadata-item">
            <span class="metadata-label">Context</span>
            <span class="metadata-value"><%= @quote.context %></span>
          </div>
        <% end %>
        <% if @quote.character.present? %>
          <div class="metadata-item">
            <span class="metadata-label">Character</span>
            <span class="metadata-value"><%= @quote.character %></span>
          </div>
        <% end %>
      </div>

      <!-- Engagement and Tags Section -->
      <div class="quote-engagement-section" data-quote-engagement data-quote-id="<%= @quote.id %>">
        <!-- Tags (left side) -->
        <% if @quote.tags.any? %>
          <div class="quote-tags">
            <% @quote.tags.each do |tag| %>
              <span class="tag-badge"><%= tag.name %></span>
            <% end %>
          </div>
        <% else %>
          <div class="quote-tags-placeholder"></div>
        <% end %>

        <!-- Like/Dislike buttons (right side) -->
        <% if user_signed_in? %>
          <div class="quote-engagement" data-quote-id="<%= @quote.id %>">
            <button class="engagement-btn like-btn <%= 'like-active' if @user_like_status == 'like' %>"
                    data-type="like" data-quote-id="<%= @quote.id %>"
                    aria-label="Like this quote"
                    aria-pressed="<%= (@user_like_status == 'like') ? 'true' : 'false' %>">
              <span class="thumb-icon">
                <svg viewBox="0 0 24 24">
                  <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>
                </svg>
              </span>
              <span class="count"><%= @likes_count %></span>
            </button>
            
            <button class="engagement-btn dislike-btn <%= 'dislike-active' if @user_like_status == 'dislike' %>"
                    data-type="dislike" data-quote-id="<%= @quote.id %>"
                    aria-label="Dislike this quote"
                    aria-pressed="<%= (@user_like_status == 'dislike') ? 'true' : 'false' %>">
              <span class="thumb-icon">
                <svg viewBox="0 0 24 24">
                  <path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path>
                </svg>
              </span>
              <span class="count"><%= @dislikes_count %></span>
            </button>
          </div>
        <% else %>
          <div class="quote-engagement-wrapper">
            <p class="empty-message" style="text-align: center; margin-bottom: 0.5rem; font-size: 0.9rem;">
              <a href="/users/sign_in" style="color: #8b7355; text-decoration: underline;">Sign in</a> 
              to like/dislike
            </p>
            <div class="quote-engagement">
              <div class="engagement-btn">
                <span class="thumb-icon">
                  <svg viewBox="0 0 24 24">
                    <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>
                  </svg>
                </span>
                <span class="count"><%= @likes_count %></span>
              </div>
              <div class="engagement-btn">
                <span class="thumb-icon">
                  <svg viewBox="0 0 24 24">
                    <path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path>
                  </svg>
                </span>
                <span class="count"><%= @dislikes_count %></span>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- Comments Section -->
    <div class="interaction-section">
      <div class="interaction-card">
        <div class="comments-section">
          <h2 class="section-title">
            Comments (<%= @comments_count %>)
          </h2>

          <!-- Comment Form -->
          <% if user_signed_in? %>
            <p>Comment form disabled for testing</p>
          <% else %>
            <div class="comment-form">
              <p class="empty-message" style="text-align: center;">
                <a href="/users/sign_in" style="color: #8b7355; text-decoration: underline;">Sign in</a>
                to join the conversation
              </p>
            </div>
          <% end %>

          <!-- Comments List -->
          <div class="comments-list" id="comments-list">
            <% if @comments.any? %>
              <p>Comments: <%= @comments.count %> (partial disabled for testing)</p>
            <% else %>
              <div class="empty-message" style="text-align: center; padding: 2rem;">
                No comments yet. Be the first to share your thoughts!
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  <% else %>
    <div class="no-quote">
      <h2>No quote for this date</h2>
      <p>There was no quote displayed on <%= @discover_date.strftime('%B %d, %Y') %>.</p>
      <div style="margin-top: 1.5rem;">
        <%= link_to "Back to Discovered Quotes", discover_index_path, class: "back-to-discover" %>
        <%= link_to "Browse Discover", discover_index_path, class: "back-to-discover", style: "margin-left: 1rem;" %>
      </div>
    </div>
  <% end %>
</main>

<!-- JavaScript for Real-time Interactions -->
<script>
/**
 * Quote Engagement Module - Handles like/dislike functionality
 */
const QuoteEngagement = {
  initialized: false,
  boundHandleClick: null,

  init() {
    if (this.initialized) return;
    
    this.boundHandleClick = this.handleClick.bind(this);
    document.addEventListener('click', this.boundHandleClick);
    
    this.initialized = true;
  },

  destroy() {
    if (!this.initialized) return;
    
    if (this.boundHandleClick) {
      document.removeEventListener('click', this.boundHandleClick);
    }
    
    this.initialized = false;
  },

  handleClick(event) {
    const button = event.target.closest('[data-quote-engagement] .engagement-btn[data-type]');
    if (!button) return;

    event.preventDefault();
    event.stopPropagation();

    const quoteId = button.dataset.quoteId;
    const type = button.dataset.type;

    if (!quoteId || !type) return;

    if (button.disabled) return;
    button.disabled = true;

    this.submitLike(quoteId, type, button);
  },

  submitLike(quoteId, type, button) {
    const formData = new FormData();
    formData.append('like_type', type);

    fetch(`/quotes/${quoteId}/quote_likes`, {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        this.updateEngagementButtons(quoteId, data);
      } else {
        console.error('Error:', data.error);
        alert(data.error || 'Error updating preference. Please try again.');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error updating preference. Please try again.');
    })
    .finally(() => {
      button.disabled = false;
    });
  },

  updateEngagementButtons(quoteId, data) {
    const engagementSection = document.querySelector(`[data-quote-engagement][data-quote-id="${quoteId}"]`);
    if (!engagementSection) return;

    const likeBtn = engagementSection.querySelector('.like-btn');
    const dislikeBtn = engagementSection.querySelector('.dislike-btn');

    if (!likeBtn || !dislikeBtn) return;

    const likeCount = likeBtn.querySelector('.count');
    const dislikeCount = dislikeBtn.querySelector('.count');
    
    if (likeCount) likeCount.textContent = data.likes_count;
    if (dislikeCount) dislikeCount.textContent = data.dislikes_count;

    likeBtn.classList.toggle('like-active', data.user_like_status === 'like');
    dislikeBtn.classList.toggle('dislike-active', data.user_like_status === 'dislike');

    likeBtn.setAttribute('aria-pressed', data.user_like_status === 'like' ? 'true' : 'false');
    dislikeBtn.setAttribute('aria-pressed', data.user_like_status === 'dislike' ? 'true' : 'false');
  }
};

/**
 * Quote Comments Module - Handles comment functionality
 */
const QuoteComments = {
  initialized: false,

  init() {
    if (this.initialized) return;

    document.addEventListener('submit', this.handleFormSubmission.bind(this));
    document.addEventListener('click', this.handleCommentClick.bind(this));
    
    this.initialized = true;
  },

  destroy() {
    if (!this.initialized) return;
    
    document.removeEventListener('submit', this.handleFormSubmission.bind(this));
    document.removeEventListener('click', this.handleCommentClick.bind(this));
    
    this.initialized = false;
  },

  handleFormSubmission(e) {
    if (e.target.id === 'comment-form') {
      this.handleCommentSubmission(e);
    } else if (e.target.classList.contains('reply-form-inner')) {
      this.handleReplySubmission(e);
    } else if (e.target.classList.contains('edit-form-inner')) {
      this.handleEditSubmission(e);
    }
  },

  handleCommentSubmission(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const submitBtn = form.querySelector('.btn-primary');
    const textarea = form.querySelector('textarea');
    
    if (!textarea.value.trim()) {
      alert('Please enter a comment before submitting.');
      return;
    }
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'Posting...';
    
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        textarea.value = '';
        
        const commentsList = document.getElementById('comments-list');
        if (commentsList.innerHTML.includes('No comments yet')) {
          commentsList.innerHTML = data.html;
        } else {
          commentsList.insertAdjacentHTML('beforeend', data.html);
        }
        
        const commentsTitle = document.querySelector('.comments-section .section-title');
        if (commentsTitle) {
          commentsTitle.innerHTML = `Comments (${data.comments_count})`;
        }
      } else {
        const errorMessage = data.errors ? data.errors.join(', ') : (data.error || 'Error posting comment. Please try again.');
        alert(errorMessage);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error posting comment. Please try again.');
    })
    .finally(() => {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Post Comment';
    });
  },

  handleCommentClick(e) {
    if (e.target.classList.contains('reply-btn')) {
      this.toggleReplyForm(e.target.dataset.commentId);
    } else if (e.target.classList.contains('cancel-reply-btn')) {
      this.hideReplyForm(e.target.dataset.commentId);
    } else if (e.target.classList.contains('edit-btn')) {
      this.showEditForm(e.target.dataset.commentId);
    } else if (e.target.classList.contains('cancel-edit-btn')) {
      this.hideEditForm(e.target.dataset.commentId);
    } else if (e.target.classList.contains('delete-btn')) {
      this.handleDeleteClick(e);
    }
  },

  toggleReplyForm(commentId) {
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    
    document.querySelectorAll('.reply-form').forEach(form => {
      if (form.id !== `reply-form-${commentId}`) {
        form.style.display = 'none';
      }
    });
    
    replyForm.style.display = replyForm.style.display === 'none' ? 'block' : 'none';
    
    if (replyForm.style.display === 'block') {
      const textarea = replyForm.querySelector('textarea');
      setTimeout(() => textarea.focus(), 100);
    }
  },

  hideReplyForm(commentId) {
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    replyForm.style.display = 'none';
    replyForm.querySelector('textarea').value = '';
  },

  showEditForm(commentId) {
    const editForm = document.getElementById(`edit-form-${commentId}`);
    const commentContent = document.querySelector(`[data-comment-id="${commentId}"] .comment-content`);
    
    document.querySelectorAll('.edit-form').forEach(form => {
      if (form.id !== `edit-form-${commentId}`) {
        form.style.display = 'none';
      }
    });
    
    if (commentContent && editForm) {
      commentContent.style.display = 'none';
      editForm.style.display = 'block';
      
      const textarea = editForm.querySelector('textarea');
      setTimeout(() => textarea.focus(), 100);
    }
  },

  hideEditForm(commentId) {
    const editForm = document.getElementById(`edit-form-${commentId}`);
    const commentContent = document.querySelector(`[data-comment-id="${commentId}"] .comment-content`);
    
    if (editForm && commentContent) {
      editForm.style.display = 'none';
      commentContent.style.display = 'block';
    }
  },

  handleReplySubmission(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const submitBtn = form.querySelector('.btn-primary');
    const commentId = form.dataset.commentId;
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'Posting...';
    
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const replyForm = document.getElementById(`reply-form-${commentId}`);
        replyForm.style.display = 'none';
        form.querySelector('textarea').value = '';
        location.reload();
      } else {
        const errorMessage = data.errors ? data.errors.join(', ') : (data.error || 'Error posting reply. Please try again.');
        alert(errorMessage);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error posting reply. Please try again.');
    })
    .finally(() => {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Post Reply';
    });
  },

  handleEditSubmission(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const submitBtn = form.querySelector('.btn-primary');
    const commentId = form.dataset.commentId;
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'Saving...';
    
    fetch(form.action, {
      method: 'PATCH',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const commentContent = document.querySelector(`[data-comment-id="${commentId}"] .comment-content`);
        const editForm = document.getElementById(`edit-form-${commentId}`);
        const textarea = form.querySelector('textarea');
        
        if (commentContent && editForm) {
          const simpleFormatted = textarea.value
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\n\s*\n/g, '</p><p>')
            .replace(/\n/g, '<br>')
            .replace(/^/, '<p>')
            .replace(/$/, '</p>')
            .replace(/<p><\/p>/g, '');
          commentContent.innerHTML = simpleFormatted;
          
          let editIndicator = document.querySelector(`[data-comment-id="${commentId}"] .edit-indicator`);
          if (!editIndicator) {
            editIndicator = document.createElement('span');
            editIndicator.className = 'edit-indicator';
            document.querySelector(`[data-comment-id="${commentId}"] .comment-actions`).appendChild(editIndicator);
          }
          editIndicator.textContent = `(edited just now)`;
          
          editForm.style.display = 'none';
          commentContent.style.display = 'block';
        }
      } else {
        const errorMessage = data.errors ? data.errors.join(', ') : (data.error || 'Error saving changes. Please try again.');
        alert(errorMessage);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error saving changes. Please try again.');
    })
    .finally(() => {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Save Changes';
    });
  },

  handleDeleteClick(e) {
    const commentId = e.target.dataset.commentId;
    
    if (!confirm('Are you sure you want to delete this comment? This action cannot be undone.')) {
      return;
    }
    
    const deleteUrl = `/comments/${commentId}`;
    
    fetch(deleteUrl, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        location.reload();
      } else {
        alert(data.error || 'Error deleting comment. Please try again.');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error deleting comment. Please try again.');
    });
  }
};

// Initialize modules on DOM content loaded
document.addEventListener('DOMContentLoaded', function() {
  QuoteEngagement.init();
  QuoteComments.init();
});

// Handle Turbo navigation
document.addEventListener('turbo:before-cache', function() {
  QuoteEngagement.destroy();
  QuoteComments.destroy();
});

document.addEventListener('turbo:load', function() {
  QuoteEngagement.init();
  QuoteComments.init();
});

// ActionCable integration for real-time updates
if (typeof App !== 'undefined' && App.cable) {
  const quoteElement = document.querySelector('[data-quote-id]');
  
  if (quoteElement) {
    const quoteId = quoteElement.dataset.quoteId;
    
    App.quoteInteraction = App.cable.subscriptions.create(
      { channel: "QuoteInteractionChannel", quote_id: quoteId },
      {
        received(data) {
          if (data.type === 'like_update') {
            QuoteEngagement.updateEngagementButtons(data.quote_id, data);
          } else if (data.type === 'comment_update') {
            const commentsTitle = document.querySelector('.comments-section .section-title');
            if (commentsTitle) {
              commentsTitle.innerHTML = `Comments (${data.comments_count})`;
            }
          }
        }
      }
    );
  }
}
</script>