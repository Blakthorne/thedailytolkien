<% if @quote %>
  <main class="main-content">
    <!-- Discover Notice -->
    <div class="discover-notice" style="background: rgba(255, 107, 53, 0.1); border: 1px solid rgba(255, 107, 53, 0.3); border-radius: 8px; padding: 1rem; margin-bottom: 1rem; text-align: center; color: #3d2c1d;">
      This quote was last featured on <%= @discover_date.strftime('%B %d, %Y') %>.
    </div>
    
    <!-- Navigation Links -->
    <div style="margin: 1rem 0rem 2rem 0rem; text-align: center;">
      <%= link_to "← Back to Discovered Quotes", discover_index_path, class: "back-to-home" %>
    </div>

    <!-- Main Quote Card -->
    <div class="quote-card">
      <blockquote class="quote-text">
        <%= @quote.text %>
      </blockquote>

      <div class="metadata-section">
        <% if @quote.book.present? %>
          <div class="metadata-item">
            <span class="metadata-label">Book</span>
            <span class="metadata-value"><%= @quote.book %></span>
          </div>
        <% end %>
        <% if @quote.chapter.present? %>
          <div class="metadata-item">
            <span class="metadata-label">Chapter</span>
            <span class="metadata-value"><%= @quote.chapter %></span>
          </div>
        <% end %>
        <% if @quote.context.present? %>
          <div class="metadata-item">
            <span class="metadata-label">Context</span>
            <span class="metadata-value"><%= @quote.context %></span>
          </div>
        <% end %>
        <% if @quote.character.present? %>
          <div class="metadata-item">
            <span class="metadata-label">Character</span>
            <span class="metadata-value"><%= @quote.character %></span>
          </div>
        <% end %>
      </div>

      <!-- Engagement and Tags Section (unified layout) -->
      <div class="quote-engagement-section" data-quote-engagement data-quote-id="<%= @quote.id %>">
        <!-- Tags (left side) -->
        <% if @tags.any? %>
          <div class="quote-tags">
            <% @tags.each do |tag| %>
              <span class="tag-badge"><%= tag.name %></span>
            <% end %>
          </div>
        <% else %>
          <div class="quote-tags-placeholder"></div>
        <% end %>

        <!-- Like/Dislike buttons (right side) -->
        <% if user_signed_in? %>
          <div class="quote-engagement" data-quote-id="<%= @quote.id %>">
            <button class="engagement-btn like-btn <%= 'like-active' if @user_like_status == 'like' %>"
                    data-type="like" data-quote-id="<%= @quote.id %>"
                    aria-label="Like this quote"
                    aria-pressed="<%= (@user_like_status == 'like') ? 'true' : 'false' %>">
              <span class="thumb-icon">
                <svg viewBox="0 0 24 24">
                  <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>
                </svg>
              </span>
              <span class="count"><%= @likes_count %></span>
            </button>
            
            <button class="engagement-btn dislike-btn <%= 'dislike-active' if @user_like_status == 'dislike' %>"
                    data-type="dislike" data-quote-id="<%= @quote.id %>"
                    aria-label="Dislike this quote"
                    aria-pressed="<%= (@user_like_status == 'dislike') ? 'true' : 'false' %>">
              <span class="thumb-icon">
                <svg viewBox="0 0 24 24">
                  <path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path>
                </svg>
              </span>
              <span class="count"><%= @dislikes_count %></span>
            </button>
          </div>
        <% else %>
          <div class="quote-engagement-wrapper">
            <p class="empty-message" style="text-align: center; margin-bottom: 0.5rem; font-size: 0.9rem;">
              <%= link_to "Sign in", new_user_session_path, style: "color: #8b7355; text-decoration: underline;" %> 
              to like/dislike
            </p>
            <div class="quote-engagement">
              <div class="engagement-btn">
                <span class="thumb-icon">
                  <svg viewBox="0 0 24 24">
                    <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>
                  </svg>
                </span>
                <span class="count"><%= @likes_count %></span>
              </div>
              <div class="engagement-btn">
                <span class="thumb-icon">
                  <svg viewBox="0 0 24 24">
                    <path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path>
                  </svg>
                </span>
                <span class="count"><%= @dislikes_count %></span>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    </div>

    <!-- Comments Section -->
    <div class="interaction-section">
      <div class="interaction-card">
        <div class="comments-section">
          <h2 class="section-title">
            Comments (<%= @comments_count %>)
          </h2>

          <!-- Comment Form -->
          <% if user_signed_in? %>
            <%= form_with model: [@quote, Comment.new], url: quote_comments_path(@quote), method: :post, local: false, 
                          class: "comment-form", id: "comment-form" do |f| %>
              <div class="form-group">
                <label for="comment_content">Share your thoughts about this quote:</label>
                <%= f.text_area :content, class: "form-control", id: "comment_content", 
                                rows: 4, placeholder: "What does this quote mean to you?" %>
              </div>
              <%= f.submit "Post Comment", class: "btn btn-primary" %>
            <% end %>
          <% else %>
            <div class="comment-form">
              <p class="empty-message" style="text-align: center;">
                <%= link_to "Sign in", new_user_session_path, style: "color: #8b7355; text-decoration: underline;" %> 
                to join the conversation
              </p>
            </div>
          <% end %>

          <!-- Comments List -->
          <div class="comments-list" id="comments-list">
            <% if @comments.any? %>
              <% @comments.each do |comment| %>
                <%= render 'discover/discover_comment_with_replies', comment: comment, depth: 0 %>
              <% end %>
            <% else %>
              <div class="empty-message" style="text-align: center; padding: 2rem;">
                No comments yet. Be the first to share your thoughts!
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </main>
<% else %>
  <main class="main-content">
    <div class="no-quote">
      <h2>No quote found</h2>
      <p>The requested quote could not be found.</p>
      <p>
        <%= link_to "Back to Discovered Quotes", discover_index_path %>
      </p>
    </div>
  </main>
<% end %>

<!-- JavaScript for Real-time Interactions -->
<script type="module" type="module">
import { QuoteEngagement, QuoteComments } from "quote_engagement";
import { QuoteEngagement, QuoteComments } from "quote_engagement";

// Turbo lifecycle integration for all modules
document.addEventListener('turbo:load', () => {
  QuoteEngagement.init();
  QuoteComments.init();
});

document.addEventListener('turbo:before-cache', () => {
  QuoteEngagement.destroy();
  // Comments module doesn't need cleanup as it uses document-level listeners
});

// Skip duplicate definitions - using module imports instead
if (false) {
  initialized: false,
  boundHandleClick: null,

  /**
   * Initialize the engagement system
   */
  init() {
    if (this.initialized) return;
    
    // Bind the click handler once to preserve reference for cleanup
    this.boundHandleClick = this.handleClick.bind(this);
    document.addEventListener('click', this.boundHandleClick);
    
    this.initialized = true;
  },

  /**
   * Clean up event listeners (called before Turbo caches the page)
   */
  destroy() {
    if (!this.initialized) return;
    
    if (this.boundHandleClick) {
      document.removeEventListener('click', this.boundHandleClick);
    }
    
    this.initialized = false;
  },

  /**
   * Handle click events on engagement buttons
   */
  handleClick(event) {
    // Use event delegation to find engagement buttons
    const button = event.target.closest('[data-quote-engagement] .engagement-btn[data-type]');
    if (!button) return;

    event.preventDefault();
    
    const quoteId = button.closest('[data-quote-engagement]').dataset.quoteId;
    const type = button.dataset.type;
    
    if (!quoteId || !type) return;
    
    this.submitLike(button, quoteId, type);
  },

  /**
   * Submit like/dislike via AJAX
   */
  async submitLike(button, quoteId, type) {
    // Prevent double-clicks
    if (button.disabled) return;
    
    this.setButtonLoading(button, true);

    try {
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
      if (!csrfToken) {
        throw new Error('CSRF token not found');
      }

      const response = await fetch(`/quotes/${quoteId}/likes`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken,
          'X-Requested-With': 'XMLHttpRequest'
        },
        credentials: 'same-origin',
        body: JSON.stringify({ like_type: type })
      });

      if (!response.ok) {
        if (response.status === 401) {
          alert('Please sign in to like or dislike quotes.');
          return;
        } else if (response.status === 422) {
          alert('Session expired. Refreshing page...');
          window.location.reload();
          return;
        }
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        this.updateEngagementUI(data);
      } else {
        const errorMsg = data.error || 'An error occurred';
        alert(errorMsg);
      }

    } catch (error) {
      console.error('Engagement error:', error);
      alert('Network error. Please try again.');
    } finally {
      this.setButtonLoading(button, false);
    }
  },

  /**
   * Update the engagement UI with new data
   */
  updateEngagementUI(data) {
    const container = document.querySelector('[data-quote-engagement]');
    if (!container) return;

    const likeBtn = container.querySelector('.like-btn');
    const dislikeBtn = container.querySelector('.dislike-btn');
    
    if (!likeBtn || !dislikeBtn) return;

    // Reset active states
    likeBtn.classList.remove('like-active');
    dislikeBtn.classList.remove('dislike-active');

    // Update counts
    const likeCount = likeBtn.querySelector('.count');
    const dislikeCount = dislikeBtn.querySelector('.count');
    
    if (likeCount && typeof data.likes_count !== 'undefined') {
      likeCount.textContent = data.likes_count;
    }
    if (dislikeCount && typeof data.dislikes_count !== 'undefined') {
      dislikeCount.textContent = data.dislikes_count;
    }

    // Set active state and ARIA attributes
    const isLiked = data.user_like_status === 'like';
    const isDisliked = data.user_like_status === 'dislike';

    if (isLiked) {
      likeBtn.classList.add('like-active');
    } else if (isDisliked) {
      dislikeBtn.classList.add('dislike-active');
    }

    likeBtn.setAttribute('aria-pressed', isLiked.toString());
    dislikeBtn.setAttribute('aria-pressed', isDisliked.toString());
  },

  /**
   * Update only counts (for ActionCable broadcasts)
   */
  updateEngagementCounts(data) {
    const container = document.querySelector('[data-quote-engagement]');
    if (!container) return;

    const likeCount = container.querySelector('.like-btn .count');
    const dislikeCount = container.querySelector('.dislike-btn .count');

    if (likeCount && typeof data.likes_count !== 'undefined') {
      likeCount.textContent = data.likes_count;
    }
    if (dislikeCount && typeof data.dislikes_count !== 'undefined') {
      dislikeCount.textContent = data.dislikes_count;
    }
  },

  /**
   * Set button loading state
   */
  setButtonLoading(button, loading) {
    button.disabled = loading;
    if (loading) {
      button.classList.add('loading');
    } else {
      button.classList.remove('loading');
    }
  }
};

// Global function for ActionCable (maintains backward compatibility)
function updateEngagementCounts(data) {
  QuoteEngagement.updateEngagementCounts(data);
}

// Comment functionality module
// Uses window.QuoteComments to avoid const redeclaration errors during Turbo navigation
window.QuoteComments = window.QuoteComments || {
  init() {
    this.bindCommentFormSubmission();
    this.bindCommentInteractions();
    this.bindReplyForms();
    this.bindEditForms();
    this.bindDeleteButtons();
  },

  bindCommentFormSubmission() {
    const commentForm = document.getElementById('comment-form');
    if (commentForm) {
      commentForm.addEventListener('submit', this.handleCommentSubmission.bind(this));
    }
  },

  bindCommentInteractions() {
    document.addEventListener('click', this.handleCommentClick.bind(this));
  },

  bindReplyForms() {
    document.addEventListener('submit', this.handleReplySubmission.bind(this));
  },

  bindEditForms() {
    document.addEventListener('submit', this.handleEditSubmission.bind(this));
  },

  bindDeleteButtons() {
    document.addEventListener('click', this.handleDeleteClick.bind(this));
  },

  handleCommentSubmission(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const submitBtn = form.querySelector('.btn-primary');
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'Posting...';
    
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        document.getElementById('comment_content').value = '';
        
        if (data.html) {
          const commentsList = document.getElementById('comments-list');
          if (commentsList.innerHTML.includes('No comments yet')) {
            commentsList.innerHTML = data.html;
          } else {
            commentsList.insertAdjacentHTML('beforeend', data.html);
          }
        }
        
        const commentsTitle = document.querySelector('.comments-section .section-title');
        if (commentsTitle) {
          commentsTitle.innerHTML = `Comments (${data.comments_count})`;
        }
      } else {
        const errorMessage = data.errors ? data.errors.join(', ') : (data.error || 'Error posting comment. Please try again.');
        alert(errorMessage);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error posting comment. Please try again.');
    })
    .finally(() => {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Post Comment';
    });
  },

  handleCommentClick(e) {
    if (e.target.classList.contains('reply-btn')) {
      this.toggleReplyForm(e.target.dataset.commentId);
    } else if (e.target.classList.contains('cancel-reply-btn')) {
      this.hideReplyForm(e.target.dataset.commentId);
    } else if (e.target.classList.contains('edit-btn')) {
      this.showEditForm(e.target.dataset.commentId);
    } else if (e.target.classList.contains('cancel-edit-btn')) {
      this.hideEditForm(e.target.dataset.commentId);
    }
  },

  toggleReplyForm(commentId) {
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    
    document.querySelectorAll('.reply-form').forEach(form => {
      if (form.id !== `reply-form-${commentId}`) {
        form.style.display = 'none';
      }
    });
    
    replyForm.style.display = replyForm.style.display === 'none' ? 'block' : 'none';
    
    if (replyForm.style.display === 'block') {
      const textarea = replyForm.querySelector('textarea');
      setTimeout(() => textarea.focus(), 100);
    }
  },

  hideReplyForm(commentId) {
    const replyForm = document.getElementById(`reply-form-${commentId}`);
    replyForm.style.display = 'none';
    replyForm.querySelector('textarea').value = '';
  },

  showEditForm(commentId) {
    const editForm = document.getElementById(`edit-form-${commentId}`);
    const commentContent = document.querySelector(`[data-comment-id="${commentId}"] .comment-content`);
    
    document.querySelectorAll('.edit-form').forEach(form => {
      if (form.id !== `edit-form-${commentId}`) {
        form.style.display = 'none';
      }
    });
    
    if (commentContent && editForm) {
      commentContent.style.display = 'none';
      editForm.style.display = 'block';
      
      const textarea = editForm.querySelector('textarea');
      setTimeout(() => textarea.focus(), 100);
    }
  },

  hideEditForm(commentId) {
    const editForm = document.getElementById(`edit-form-${commentId}`);
    const commentContent = document.querySelector(`[data-comment-id="${commentId}"] .comment-content`);
    
    if (editForm && commentContent) {
      editForm.style.display = 'none';
      commentContent.style.display = 'block';
    }
  },

  handleReplySubmission(e) {
    if (!e.target.classList.contains('reply-form-inner')) return;
    
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const submitBtn = form.querySelector('.btn-primary');
    const commentId = form.dataset.commentId;
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'Posting...';
    
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const replyForm = document.getElementById(`reply-form-${commentId}`);
        replyForm.style.display = 'none';
        form.querySelector('textarea').value = '';
        location.reload();
      } else {
        const errorMessage = data.errors ? data.errors.join(', ') : (data.error || 'Error posting reply. Please try again.');
        alert(errorMessage);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error posting reply. Please try again.');
    })
    .finally(() => {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Post Reply';
    });
  },

  handleEditSubmission(e) {
    if (!e.target.classList.contains('edit-form-inner')) return;
    
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const submitBtn = form.querySelector('.btn-primary');
    const commentId = form.dataset.commentId;
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'Saving...';
    
    fetch(form.action, {
      method: 'PATCH',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const commentContent = document.querySelector(`[data-comment-id="${commentId}"] .comment-content`);
        const editForm = document.getElementById(`edit-form-${commentId}`);
        const textarea = form.querySelector('textarea');
        
        if (commentContent && editForm) {
          const simpleFormatted = textarea.value
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\n\s*\n/g, '</p><p>')
            .replace(/\n/g, '<br>')
            .replace(/^/, '<p>')
            .replace(/$/, '</p>')
            .replace(/<p><\/p>/g, '');
          commentContent.innerHTML = simpleFormatted;
          
          let editIndicator = document.querySelector(`[data-comment-id="${commentId}"] .edit-indicator`);
          if (!editIndicator) {
            editIndicator = document.createElement('span');
            editIndicator.className = 'edit-indicator';
            document.querySelector(`[data-comment-id="${commentId}"] .comment-actions`).appendChild(editIndicator);
          }
          editIndicator.textContent = `(edited just now)`;
          
          editForm.style.display = 'none';
          commentContent.style.display = 'block';
        }
      } else {
        const errorMessage = data.errors ? data.errors.join(', ') : (data.error || 'Error saving changes. Please try again.');
        alert(errorMessage);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('Error saving changes. Please try again.');
    })
    .finally(() => {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Save Changes';
    });
  },

  handleDeleteClick(e) {
    if (!e.target.classList.contains('delete-btn')) return;
    
    const commentId = e.target.dataset.commentId;
    const confirmMessage = e.target.dataset.turboConfirm;
    
    if (confirm(confirmMessage)) {
      e.target.disabled = true;
      e.target.textContent = 'Deleting...';
      
      fetch(`/comments/${commentId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
          'Accept': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
          if (commentElement) {
            commentElement.remove();
          }
          
          if (data.total_count !== undefined) {
            const commentsTitle = document.querySelector('.comments-section .section-title');
            if (commentsTitle) {
              commentsTitle.innerHTML = `Comments (${data.total_count})`;
            }
          }
        } else {
          const errorMessage = data.error || 'Error deleting comment. Please try again.';
          alert(errorMessage);
          e.target.disabled = false;
          e.target.textContent = e.target.textContent.includes('Admin') ? 'Delete (Admin)' : 'Delete';
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error deleting comment. Please try again.');
        e.target.disabled = false;
        e.target.textContent = e.target.textContent.includes('Admin') ? 'Delete (Admin)' : 'Delete';
      });
    }
  }
};

// Turbo lifecycle integration for all modules
document.addEventListener('turbo:load', () => {
  QuoteEngagement.init();
  QuoteComments.init();
});

document.addEventListener('turbo:before-cache', () => {
  QuoteEngagement.destroy();
  // Comments module doesn't need cleanup as it uses document-level listeners
});

// ActionCable setup for real-time updates
document.addEventListener('turbo:load', function() {
  <% if @quote %>
  // Subscribe to quote interaction updates
  if (typeof window.App === 'undefined') {
    window.App = {};
  }
  if (typeof window.App.cable === 'undefined' && typeof ActionCable !== 'undefined') {
    window.App.cable = ActionCable.createConsumer();
  }
  
  if (window.App.cable) {
    // Clean up existing subscription
    if (App.quoteChannel?.unsubscribe) {
      try { App.quoteChannel.unsubscribe(); } catch(e) { /* ignore */ }
    }

    App.quoteChannel = window.App.cable.subscriptions.create({
      channel: "QuoteInteractionChannel",
      quote_id: <%= @quote.id %>
    }, {
      received: function(data) {
        if (data.type === 'like_update') {
          // Update counts only (preserve user's active state)
          updateEngagementCounts(data);
        } else if (data.type === 'comment_update') {
          // Handle comment updates
          if (data.html) {
            const commentsList = document.getElementById('comments-list');
            if (commentsList?.innerHTML.includes('No comments yet')) {
              commentsList.innerHTML = data.html;
            } else if (commentsList) {
              commentsList.insertAdjacentHTML('beforeend', data.html);
            }
          }
          
          const commentsTitle = document.querySelector('.comments-section .section-title');
          if (commentsTitle) {
            commentsTitle.innerHTML = `Comments (${data.comments_count})`;
          }
        }
      }
    });
  }
  <% end %>
});
</script>