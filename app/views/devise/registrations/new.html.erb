<style>

  body {
    background: #f5f0e8;
    font-family: 'Source Sans Pro', sans-serif;
    margin: 0;
    padding: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .app-header { 
    visibility: hidden;
  }

  .auth-wrapper {
    display: flex;
    align-items: center;
    gap: 3rem;
    max-width: 900px;
    width: 100%;
    margin: 2rem;
  }

  .title-section {
    flex: 1;
    text-align: center;
    padding: 2rem;
  }

  .title-section h1 {
    font-family: 'Crimson Text', serif;
    font-size: 3.5rem;
    font-weight: 700;
    color: #3d2c1d;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    letter-spacing: 0.1em;
    line-height: 1.2;
  }

  .title-section .subtitle {
    font-family: 'Source Sans Pro', sans-serif;
    font-size: 1.2rem;
    color: #8b7355;
    margin-top: 1rem;
    font-weight: 500;
    letter-spacing: 0.05em;
  }

  .registration-container {
    background: rgba(245, 240, 232, 0.1); /* Semi-transparent parchment */
    backdrop-filter: blur(2px);
    border-radius: 12px;
    padding: 1rem 1.5rem;
    border: 2px solid #8b7355;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    max-width: 600px;
    width: 100%;
    flex: 1;
  }

  h2 {
    font-family: 'Crimson Text', serif;
    color: #3d2c1d;
    text-align: center;
    margin-bottom: 1rem;
    font-size: 2rem;
    font-weight: 600;
  }

  .registration-form {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem 1.5rem;
    margin-bottom: 1rem;
  }

  .field {
    margin-bottom: 0;
  }

  .field.error input {
    border-color: #dc3545;
    background: rgba(220, 53, 69, 0.05);
  }

  .error-message {
    color: #dc3545;
    font-size: 0.85rem;
    font-weight: 500;
    display: none;
    line-height: 1.2;
  }

  .field.error .error-message {
    display: block;
  }

  .auth-error {
    background: rgba(220, 53, 69, 0.1);
    border: 1px solid #dc3545;
    border-radius: 6px;
    padding: 1rem;
    margin-bottom: 1rem;
    text-align: center;
    color: #dc3545;
    font-weight: 500;
  }

  .field.full-width {
    grid-column: 1 / -1;
  }

  label {
    display: block;
    font-weight: 600;
    color: #3d2c1d;
    font-size: 0.9rem;
  }

  input[type="email"],
  input[type="password"],
  input[type="text"] {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #8b7355;
    border-radius: 6px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.8);
    color: #3d2c1d;
    transition: border-color 0.2s ease;
  }

  input[type="email"]:focus,
  input[type="password"]:focus,
  input[type="text"]:focus {
    outline: none;
    border-color: #3d2c1d;
  }

  .actions {
    margin-top: 1rem;
  }

  input[type="submit"] {
    width: 100%;
    padding: 0.75rem;
    background: #8b7355;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  input[type="submit"]:hover {
    background: #3d2c1d;
  }

  .oauth-section {
    margin-top: 1rem;
    text-align: center;
  }

  .oauth-section h3 {
    font-family: 'Crimson Text', serif;
    color: #3d2c1d;
    font-size: 1.2rem;
    margin-bottom: 1rem;
    font-weight: 400;
  }

  .oauth-buttons {
    /* Single-button layout: full width in container */
    display: block;
    width: 100%;
  }

  .oauth-button {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: transform 0.08s ease, box-shadow 0.08s ease;
    width: 100%;
    justify-content: center;
    box-sizing: border-box;
  }

  /* hover uses color changes to match primary submit button */
  .oauth-button:hover {
    transform: none;
    box-shadow: none;
  }

  /* Google button: restore parchment palette and use color change on hover */
  .oauth-button.google {
    background: #fff8f2; /* subtle parchment tint */
    border: 2px solid #8b7355;
    color: #3d2c1d;
    padding-left: 1rem;
    padding-right: 1rem;
    transition: background-color 0.18s ease, color 0.18s ease, border-color 0.18s ease;
  }

  .oauth-button.google:hover {
    background: #8b7355; /* same as primary button */
    color: #ffffff;
    border-color: #8b7355;
  }

  .oauth-button.google:active {
    background: #3d2c1d; /* darker on active press */
    color: #ffffff;
  }

  .oauth-button svg { display: inline-block; width: 20px; height: 20px; }

  .oauth-button.facebook { display: none; }

  .divider {
    margin: 1.5rem 0;
    text-align: center;
    position: relative;
    color: #8b7355;
    font-size: 0.9rem;
  }

  .divider span {
    background: rgba(245, 240, 232, 0.0); /* Semi-transparent parchment */
    padding: 0 1rem;
    position: relative;
    z-index: 1;
  }

  .signin-link {
    text-align: center;
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid rgba(139, 115, 85, 0.3);
  }

  .signin-link a {
    color: #8b7355;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.95rem;
    transition: color 0.2s ease;
  }

  .signin-link a:hover {
    color: #3d2c1d;
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .auth-wrapper {
      flex-direction: column;
      gap: 2rem;
      text-align: center;
    }

    .title-section h1 {
      font-size: 2.5rem;
    }

    .title-section .subtitle {
      font-size: 1rem;
    }

    .registration-container {
      max-width: 100%;
    }

    .registration-form {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .oauth-buttons {
      flex-direction: column;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('form');
  const firstNameField = document.querySelector('.field:has(input[name="user[first_name]"])');
  const lastNameField = document.querySelector('.field:has(input[name="user[last_name]"])');
  const emailField = document.querySelector('.field:has([type="email"])');
  const passwordField = document.querySelector('.field:has(input[name="user[password]"])');
  const passwordConfirmField = document.querySelector('.field:has(input[name="user[password_confirmation]"])');

  const firstNameInput = document.querySelector('input[name="user[first_name]"]');
  const lastNameInput = document.querySelector('input[name="user[last_name]"]');
  const emailInput = document.querySelector('[type="email"]');
  const passwordInput = document.querySelector('input[name="user[password]"]');
  const passwordConfirmInput = document.querySelector('input[name="user[password_confirmation]"]');

  // Create error message elements
  const firstNameError = document.createElement('div');
  firstNameError.className = 'error-message';
  firstNameField.appendChild(firstNameError);

  const lastNameError = document.createElement('div');
  lastNameError.className = 'error-message';
  lastNameField.appendChild(lastNameError);

  const emailError = document.createElement('div');
  emailError.className = 'error-message';
  emailField.appendChild(emailError);

  const passwordError = document.createElement('div');
  passwordError.className = 'error-message';
  passwordField.appendChild(passwordError);

  const passwordConfirmError = document.createElement('div');
  passwordConfirmError.className = 'error-message';
  passwordConfirmField.appendChild(passwordConfirmError);

  function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  function showError(field, message) {
    field.classList.add('error');
    const errorElement = field.querySelector('.error-message');
    errorElement.textContent = message;
    errorElement.style.display = 'block';
  }

  function clearError(field) {
    field.classList.remove('error');
    const errorElement = field.querySelector('.error-message');
    errorElement.textContent = '';
    errorElement.style.display = 'none';
  }

  function validateForm() {
    let isValid = true;

    // Clear previous errors
    clearError(firstNameField);
    clearError(lastNameField);
    clearError(emailField);
    clearError(passwordField);
    clearError(passwordConfirmField);

    // Validate first name
    if (!firstNameInput.value.trim()) {
      showError(firstNameField, 'First name is required');
      isValid = false;
    }

    // Validate last name
    if (!lastNameInput.value.trim()) {
      showError(lastNameField, 'Last name is required');
      isValid = false;
    }

    // Validate email
    if (!emailInput.value.trim()) {
      showError(emailField, 'Email is required');
      isValid = false;
    } else if (!validateEmail(emailInput.value.trim())) {
      showError(emailField, 'Please enter a valid email address');
      isValid = false;
    }

    // Validate password
    if (!passwordInput.value.trim()) {
      showError(passwordField, 'Password is required');
      isValid = false;
    } else if (passwordInput.value.length < 6) {
      showError(passwordField, 'Password must be at least 6 characters long');
      isValid = false;
    }

    // Validate password confirmation
    if (!passwordConfirmInput.value.trim()) {
      showError(passwordConfirmField, 'Password confirmation is required');
      isValid = false;
    } else if (passwordInput.value !== passwordConfirmInput.value) {
      showError(passwordField, 'Passwords do not match');
      showError(passwordConfirmField, 'Passwords do not match');
      isValid = false;
    }

    return isValid;
  }

  // Real-time validation
  firstNameInput.addEventListener('input', function() {
    if (firstNameInput.value.trim()) {
      clearError(firstNameField);
    }
  });

  lastNameInput.addEventListener('input', function() {
    if (lastNameInput.value.trim()) {
      clearError(lastNameField);
    }
  });

  emailInput.addEventListener('input', function() {
    if (emailInput.value.trim()) {
      clearError(emailField);
    }
  });

  passwordInput.addEventListener('input', function() {
    if (passwordInput.value.trim() && passwordInput.value.length >= 6) {
      clearError(passwordField);
      // Check if password confirmation matches when password changes
      if (passwordConfirmInput.value && passwordInput.value === passwordConfirmInput.value) {
        clearError(passwordConfirmField);
      } else if (passwordConfirmInput.value && passwordInput.value !== passwordConfirmInput.value) {
        showError(passwordField, 'Passwords do not match');
        showError(passwordConfirmField, 'Passwords do not match');
      }
    }
  });

  passwordConfirmInput.addEventListener('input', function() {
    if (passwordConfirmInput.value.trim()) {
      if (passwordInput.value === passwordConfirmInput.value) {
        clearError(passwordConfirmField);
        clearError(passwordField);
      } else {
        showError(passwordField, 'Passwords do not match');
        showError(passwordConfirmField, 'Passwords do not match');
      }
    }
  });

  // Form submission validation
  form.addEventListener('submit', function(e) {
    const isValid = validateForm();
    
    if (!isValid) {
      e.preventDefault();
      e.stopPropagation();
      
      // Scroll to first error
      const firstError = document.querySelector('.field.error');
      if (firstError) {
        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      
      return false;
    }
    
  });

  // Additional form protection - listen for the actual form submission
  if (form) {
    form.onsubmit = function(e) {
      const isValid = validateForm();
      
      if (!isValid) {
        e.preventDefault();
        return false;
      }
      
      return true;
    };
  }
});
</script>

<div class="auth-wrapper">
  <div class="title-section">
    <h1>The Daily Tolkien</h1>
    <div class="subtitle">Words from the maker of Middle-earth</div>
  </div>

  <div class="registration-container">
    <h2>Sign Up</h2>

    <% if flash[:alert].present? || resource.errors.any? %>
      <div id="auth-error" class="auth-error">
        <% if flash[:alert].present? %>
          <%= flash[:alert] %>
        <% elsif resource.errors.any? %>
          <%= resource.errors.full_messages.join('. ') %>
        <% end %>
      </div>
    <% end %>

  <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>

    <div class="registration-form">
      <div class="field">
        <%= f.label :first_name %>
        <%= f.text_field :first_name, autofocus: true, autocomplete: "given-name" %>
      </div>

      <div class="field">
        <%= f.label :last_name %>
        <%= f.text_field :last_name, autocomplete: "family-name" %>
      </div>

      <div class="field">
        <%= f.label :email %>
        <%= f.email_field :email, autocomplete: "email" %>
      </div>

      <div class="field">
        <%= f.label :password %>
        <%= f.password_field :password, autocomplete: "new-password" %>
        <% if @minimum_password_length %>
          <em>(<%= @minimum_password_length %> characters minimum)</em>
        <% end %>
      </div>

      <div class="field">
        <%= f.label :password_confirmation %>
        <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
      </div>

      <!-- Hidden timezone field to be populated by JavaScript -->
      <%= f.hidden_field :streak_timezone %>
    </div>

    <div class="actions">
      <%= f.submit "Sign Up" %>
    </div>
  <% end %>

  <div class="divider">
    <span>or continue with</span>
  </div>

  <div class="oauth-section">
    <div class="oauth-buttons">
  <%= link_to user_google_oauth2_omniauth_authorize_path(origin: 'signup'), class: "oauth-button google", aria: { label: 'Sign up with Google' } do %>
        <svg width="18" height="18" viewBox="0 0 24 24" style="margin-right: 0.5rem;">
          <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>
  <span class="label">Continue with Google</span>
      <% end %>

  <!-- Facebook login removed -->
    </div>
  </div>

  <div class="signin-link">
    <%= link_to "Already have an account? Sign in", new_session_path(resource_name) %>
  </div>

  <script>
    // Detect and populate timezone for registration
    document.addEventListener('DOMContentLoaded', function() {
      const timezoneField = document.getElementById('user_streak_timezone');
      if (timezoneField) {
        const detectedTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        timezoneField.value = detectedTimezone;
        console.log('Timezone detected and set for registration:', detectedTimezone);
      }
    });
  </script>

  <%# <%= render "devise/shared/links" %>
  </div>
</div>
