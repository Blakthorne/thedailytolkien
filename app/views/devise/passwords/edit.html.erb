<style>
  body {
    font-family: 'Source Sans Pro', sans-serif;
    margin: 0;
    padding: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .app-header {
    visibility: hidden;
  }

  .auth-wrapper {
    display: flex;
    align-items: center;
    gap: 3rem;
    max-width: 900px;
    width: 100%;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  .title-section {
    flex: 1;
    text-align: center;
    padding: 2rem;
  }

  .title-section h1 {
    font-family: 'Crimson Text', serif;
    font-size: 3.5rem;
    font-weight: 700;
    color: #3d2c1d;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    letter-spacing: 0.1em;
    line-height: 1.2;
  }

  .title-section .subtitle {
    font-family: 'Source Sans Pro', sans-serif;
    font-size: 1.2rem;
    color: #8b7355;
    margin-top: 1rem;
    font-weight: 500;
    letter-spacing: 0.05em;
  }

  .reset-container {
    background: rgba(245, 240, 232, 0.1);
    backdrop-filter: blur(2px);
    border-radius: 12px;
    padding: 2rem 2rem;
    border: 2px solid #8b7355;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    max-width: 500px;
    width: 100%;
    flex: 1;
  }

  h2 {
    font-family: 'Crimson Text', serif;
    color: #3d2c1d;
    text-align: center;
    margin-bottom: 1rem;
    font-size: 2rem;
    font-weight: 600;
  }

  .instructions {
    text-align: center;
    color: #8b7355;
    margin-bottom: 1.5rem;
    font-size: 0.95rem;
    line-height: 1.5;
  }

  .password-requirements {
    background: rgba(139, 115, 85, 0.05);
    border: 1px solid rgba(139, 115, 85, 0.2);
    border-radius: 6px;
    padding: 0.75rem;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
    color: #8b7355;
  }

  .password-requirements strong {
    color: #3d2c1d;
    display: block;
    margin-bottom: 0.25rem;
  }

  .reset-form {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .field {
    margin-bottom: 0;
  }

  .field label {
    display: block;
    font-weight: 600;
    color: #3d2c1d;
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
  }

  .field input[type="password"] {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #8b7355;
    border-radius: 6px;
    font-size: 1rem;
    background: #fefcfa;
    color: #3d2c1d;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
    box-sizing: border-box;
  }

  .field input[type="password"]:focus {
    outline: none;
    border-color: #3d2c1d;
    box-shadow: 0 0 0 3px rgba(61, 44, 29, 0.1);
  }

  .field.error input {
    border-color: #dc3545;
    background: rgba(220, 53, 69, 0.05);
  }

  .field.success input {
    border-color: #28a745;
    background: rgba(40, 167, 69, 0.05);
  }

  .field.error .error-message {
    display: block;
  }

  .error-message {
    color: #dc3545;
    font-size: 0.85rem;
    font-weight: 500;
    display: none;
    margin-top: 0.25rem;
  }

  .success-icon {
    color: #28a745;
    font-size: 0.85rem;
    font-weight: 500;
    display: none;
    margin-top: 0.25rem;
  }

  .field.success .success-icon {
    display: block;
  }

  .password-strength {
    margin-top: 0.5rem;
    height: 4px;
    background: #e0e0e0;
    border-radius: 2px;
    overflow: hidden;
    display: none;
  }

  .password-strength.show {
    display: block;
  }

  .password-strength-bar {
    height: 100%;
    transition: width 0.3s ease, background-color 0.3s ease;
    width: 0%;
  }

  .password-strength-bar.weak {
    background: #dc3545;
    width: 33%;
  }

  .password-strength-bar.medium {
    background: #ffc107;
    width: 66%;
  }

  .password-strength-bar.strong {
    background: #28a745;
    width: 100%;
  }

  .password-strength-text {
    font-size: 0.85rem;
    margin-top: 0.25rem;
    font-weight: 500;
    display: none;
  }

  .password-strength-text.show {
    display: block;
  }

  .password-strength-text.weak {
    color: #dc3545;
  }

  .password-strength-text.medium {
    color: #f57c00;
  }

  .password-strength-text.strong {
    color: #28a745;
  }

  .actions {
    margin-top: 1.5rem;
  }

  input[type="submit"] {
    width: 100%;
    padding: 0.875rem;
    background: #8b7355;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  input[type="submit"]:hover {
    background: #3d2c1d;
  }

  input[type="submit"]:disabled {
    background: #ccc;
    cursor: not-allowed;
  }

  .back-link {
    text-align: center;
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid rgba(139, 115, 85, 0.3);
  }

  .back-link a {
    color: #8b7355;
    text-decoration: none;
    font-weight: 500;
    font-size: 0.95rem;
    transition: color 0.2s ease;
  }

  .back-link a:hover {
    color: #3d2c1d;
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    body {
      padding: 0rem;
    }

    .auth-wrapper {
      flex-direction: column;
      gap: 2rem;
      text-align: center;
      margin: 1rem auto;
      padding: 0 1rem;
      max-width: 100%;
    }

    .title-section {
      padding: 1rem;
    }

    .title-section h1 {
      font-size: 2.5rem;
    }

    .title-section .subtitle {
      font-size: 1rem;
    }

    .reset-container {
      max-width: 100%;
      margin: 0;
      padding: 1.5rem 1rem;
      text-align: left;
    }
  }
</style>

<script nonce="<%= content_security_policy_nonce %>">
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('form');
  const passwordField = document.querySelector('.field:has(#user_password)');
  const confirmationField = document.querySelector('.field:has(#user_password_confirmation)');
  const passwordInput = document.querySelector('#user_password');
  const confirmationInput = document.querySelector('#user_password_confirmation');
  const submitButton = document.querySelector('[type="submit"]');
  const minimumLength = <%= @minimum_password_length || 6 %>;

  // Create error message elements
  const passwordError = document.createElement('div');
  passwordError.className = 'error-message';
  passwordField.appendChild(passwordError);

  const confirmationError = document.createElement('div');
  confirmationError.className = 'error-message';
  confirmationField.appendChild(confirmationError);

  // Create password strength indicator
  const strengthIndicator = document.createElement('div');
  strengthIndicator.className = 'password-strength';
  strengthIndicator.innerHTML = '<div class="password-strength-bar"></div>';
  passwordField.appendChild(strengthIndicator);

  const strengthText = document.createElement('div');
  strengthText.className = 'password-strength-text';
  passwordField.appendChild(strengthText);

  const strengthBar = strengthIndicator.querySelector('.password-strength-bar');

  // Create success icons
  const passwordSuccess = document.createElement('div');
  passwordSuccess.className = 'success-icon';
  passwordSuccess.textContent = '✓ Password meets requirements';

  const confirmationSuccess = document.createElement('div');
  confirmationSuccess.className = 'success-icon';
  confirmationSuccess.textContent = '✓ Passwords match';

  function calculatePasswordStrength(password) {
    let strength = 0;
    if (password.length >= minimumLength) strength++;
    if (password.length >= 10) strength++;
    if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;
    if (/\d/.test(password)) strength++;
    if (/[^a-zA-Z0-9]/.test(password)) strength++;

    if (strength <= 2) return 'weak';
    if (strength <= 3) return 'medium';
    return 'strong';
  }

  function updatePasswordStrength() {
    const password = passwordInput.value;
    if (password.length === 0) {
      strengthIndicator.classList.remove('show');
      strengthText.classList.remove('show');
      return;
    }

    strengthIndicator.classList.add('show');
    strengthText.classList.add('show');

    const strength = calculatePasswordStrength(password);
    strengthBar.className = 'password-strength-bar ' + strength;
    strengthText.className = 'password-strength-text show ' + strength;

    if (strength === 'weak') {
      strengthText.textContent = 'Weak password';
    } else if (strength === 'medium') {
      strengthText.textContent = 'Medium strength';
    } else {
      strengthText.textContent = 'Strong password';
    }
  }

  function showError(field, message) {
    field.classList.remove('success');
    field.classList.add('error');
    const errorElement = field.querySelector('.error-message');
    errorElement.textContent = message;
    errorElement.style.display = 'block';
  }

  function showSuccess(field) {
    field.classList.remove('error');
    field.classList.add('success');
    const errorElement = field.querySelector('.error-message');
    errorElement.style.display = 'none';
  }

  function clearError(field) {
    field.classList.remove('error');
    field.classList.remove('success');
    const errorElement = field.querySelector('.error-message');
    errorElement.style.display = 'none';
  }

  function validatePassword() {
    const password = passwordInput.value;

    if (!password) {
      showError(passwordField, 'Password is required');
      return false;
    }

    if (password.length < minimumLength) {
      showError(passwordField, `Password must be at least ${minimumLength} characters`);
      return false;
    }

    showSuccess(passwordField);
    return true;
  }

  function validateConfirmation() {
    const password = passwordInput.value;
    const confirmation = confirmationInput.value;

    if (!confirmation) {
      showError(confirmationField, 'Password confirmation is required');
      return false;
    }

    if (password !== confirmation) {
      showError(confirmationField, 'Passwords do not match');
      return false;
    }

    showSuccess(confirmationField);
    return true;
  }

  function validateForm() {
    const passwordValid = validatePassword();
    const confirmationValid = validateConfirmation();
    return passwordValid && confirmationValid;
  }

  // Real-time validation
  passwordInput.addEventListener('input', function() {
    updatePasswordStrength();
    if (passwordInput.value.length >= minimumLength) {
      clearError(passwordField);
      if (confirmationInput.value) {
        validateConfirmation();
      }
    }
  });

  confirmationInput.addEventListener('input', function() {
    if (confirmationInput.value) {
      clearError(confirmationField);
      if (passwordInput.value && confirmationInput.value === passwordInput.value) {
        validateConfirmation();
      }
    }
  });

  // Form submission validation
  form.addEventListener('submit', function(e) {
    if (!validateForm()) {
      e.preventDefault();
      const firstError = document.querySelector('.field.error');
      if (firstError) {
        firstError.querySelector('input').focus();
      }
    } else {
      submitButton.disabled = true;
      submitButton.value = 'Changing Password...';
    }
  });
});
</script>

<div class="auth-wrapper">
  <div class="title-section">
    <h1>The Daily Tolkien</h1>
    <div class="subtitle">Words from the maker of Middle-earth</div>
  </div>

  <div class="reset-container">
    <h2>Reset Your Password</h2>

    <p class="instructions">
      Choose a new password for your account.
    </p>

    <% if @minimum_password_length %>
      <div class="password-requirements">
        <strong>Password Requirements:</strong>
        Minimum <%= @minimum_password_length %> characters. Use a mix of letters, numbers, and symbols for better security.
      </div>
    <% end %>

    <%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :put }) do |f| %>
      <%= f.hidden_field :reset_password_token %>

      <div class="reset-form">
        <div class="field">
          <%= f.label :password, "New Password" %>
          <%= f.password_field :password, autofocus: true, autocomplete: "new-password" %>
        </div>

        <div class="field">
          <%= f.label :password_confirmation, "Confirm New Password" %>
          <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
        </div>
      </div>

      <div class="actions">
        <%= f.submit "Change My Password" %>
      </div>
    <% end %>

    <div class="back-link">
      <%= link_to "← Back to Sign In", new_session_path(resource_name) %>
    </div>
  </div>
</div>
