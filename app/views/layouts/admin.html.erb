<!DOCTYPE html>
<html>
  <head>
    <title>Admin Dashboard - The Daily Tolkien</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="robots" content="noindex, nofollow">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;0,700;1,400;1,600;1,700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">
    
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <script>
      // Inline JavaScript fallback for admin functionality
      document.addEventListener('DOMContentLoaded', function() {
        console.log('Inline admin JavaScript loaded');
        
        // Row clicking functionality
        function setupRowClicking() {
          const rows = document.querySelectorAll('[data-controller*="row-link"]');
          console.log('Found ' + rows.length + ' clickable rows');
          rows.forEach(row => {
            const url = row.getAttribute('data-row-link-url-value');
            if (url) {
              row.style.cursor = 'pointer';
              row.addEventListener('click', function(e) {
                // Skip checkbox clicks
                if (e.target.type === 'checkbox') return;
                // Skip if clicking in first cell with checkbox
                const firstCell = this.querySelector('td:first-child');
                if (firstCell && firstCell.contains(e.target) && firstCell.querySelector('input[type="checkbox"]')) {
                  return;
                }
                // Skip interactive elements
                if (e.target.closest('a, button, input, select, textarea, label')) {
                  return;
                }
                console.log('Row clicked, navigating to:', url);
                window.location = url;
              });
            }
          });
        }
        
        // Simplified and more reliable sorting functionality  
        function setupSorting() {
          const tables = document.querySelectorAll('[data-controller*="sortable-table"]');
          console.log('Found ' + tables.length + ' sortable tables');
          
          tables.forEach(table => {
            const headers = table.querySelectorAll('th[role="columnheader"]');
            console.log('Found headers:', Array.from(headers).map(h => h.textContent.trim()));
            
            headers.forEach((header, headerIndex) => {
              header.style.cursor = 'pointer';
              header.addEventListener('click', function() {
                const headerText = this.textContent.trim();
                console.log('=== SORTING BY:', headerText, 'Header Index:', headerIndex, '===');
                
                const tbody = table.querySelector('tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));
                const currentSort = this.getAttribute('aria-sort') || 'none';
                const direction = currentSort === 'ascending' ? 'descending' : 'ascending';
                
                // Reset other headers
                headers.forEach(h => {
                  if (h !== this) h.setAttribute('aria-sort', 'none');
                });
                this.setAttribute('aria-sort', direction);
                console.log('Sort direction:', direction);
                
                // Calculate actual column index (accounting for checkbox column)
                const columnIndex = headerIndex + 1; // +1 because first column is checkbox
                console.log('Actual column index:', columnIndex);
                
                // Get sample values to debug
                console.log('Sample cell values:');
                for (let i = 0; i < Math.min(3, rows.length); i++) {
                  const cell = rows[i].children[columnIndex];
                  if (cell) {
                    const text = getCleanCellText(cell);
                    console.log(`Row ${i}: "${text}"`);
                  }
                }
                
                const multiplier = direction === 'ascending' ? 1 : -1;
                
                // Sort rows
                rows.sort((a, b) => {
                  const aCell = a.children[columnIndex];
                  const bCell = b.children[columnIndex];
                  
                  if (!aCell || !bCell) return 0;
                  
                  const aText = getCleanCellText(aCell);
                  const bText = getCleanCellText(bCell);
                  
                  // Simple string comparison
                  if (aText < bText) return -1 * multiplier;
                  if (aText > bText) return 1 * multiplier;
                  return 0;
                });
                
                // Re-append sorted rows
                const fragment = document.createDocumentFragment();
                rows.forEach(row => fragment.appendChild(row));
                tbody.appendChild(fragment);
                
                console.log('=== SORTING COMPLETE ===');
                // Show final order
                console.log('Final order:');
                const finalRows = tbody.querySelectorAll('tr');
                for (let i = 0; i < Math.min(5, finalRows.length); i++) {
                  const cell = finalRows[i].children[columnIndex];
                  if (cell) {
                    console.log(`${i + 1}: "${getCleanCellText(cell)}"`);
                  }
                }
              });
            });
          });
        }
        
        // Helper function for extracting clean text from cells
        function getCleanCellText(cell) {
          if (!cell) return '';
          
          // For checkbox columns, return checked status
          const checkbox = cell.querySelector('input[type="checkbox"]');
          if (checkbox) {
            return checkbox.checked ? '1' : '0';
          }
          
          // Get all text content and clean it up
          let text = cell.textContent || '';
          
          // Remove extra whitespace and normalize
          text = text.trim().replace(/\s+/g, ' ');
          
          // Convert to lowercase for consistent sorting
          text = text.toLowerCase();
          
          console.log('Extracted clean text:', `"${text}"`);
          return text;
        }
        
        // Detect column data type by analyzing sample values
        function detectColumnType(rows, columnIndex) {
          // Get the header to help with type detection
          const table = rows[0].closest('table');
          const headers = table.querySelectorAll('th[role="columnheader"]');
          const header = headers[columnIndex - 1]; // Adjust for checkbox column
          const headerText = header ? header.textContent.trim().toLowerCase() : '';
          
          console.log('Detecting type for column', columnIndex, 'header:', headerText);
          
          // Force text type for known text columns
          if (headerText.includes('quote') || headerText.includes('book') || 
              headerText.includes('chapter') || headerText.includes('character')) {
            console.log('Forcing text type for', headerText);
            return 'text';
          }
          
          // Check for explicit date columns
          if (headerText.includes('created') || headerText.includes('date') || headerText.includes('time')) {
            console.log('Detected date type for', headerText);
            return 'date';
          }
          
          const sampleSize = Math.min(rows.length, 5);
          let numericCount = 0;
          let totalSamples = 0;
          
          for (let i = 0; i < sampleSize; i++) {
            const cell = rows[i].children[columnIndex];
            if (!cell) continue;
            
            const value = getRawCellValue(cell);
            if (!value || value.trim() === '') continue;
            
            totalSamples++;
            
            // Check for pure numeric (integer or decimal)
            if (/^\d+$/.test(value.trim()) || /^\d+\.\d+$/.test(value.trim())) {
              numericCount++;
            }
          }
          
          // Determine type based on majority (higher threshold for numeric)
          if (totalSamples === 0) return 'text';
          
          const numericRatio = numericCount / totalSamples;
          console.log('Numeric ratio for column', columnIndex, ':', numericRatio);
          
          if (numericRatio >= 0.9) return 'numeric'; // Higher threshold
          return 'text'; // Default to text for safety
        }
        
        // Get raw cell value without processing
        function getRawCellValue(cell) {
          if (!cell) return '';
          
          // Check for explicit sort value first
          const sortValue = cell.getAttribute('data-sort-value');
          if (sortValue) return sortValue;
          
          // Get text content, handling nested HTML properly
          let text = cell.innerText || cell.textContent || '';
          
          // Clean up common formatting
          text = text.trim();
          // Remove quotes from quote text if present
          text = text.replace(/^["']|["']$/g, '');
          
          return text;
        }
        
        // Get processed cell value based on column type
        function getCellValue(cell, columnType) {
          const rawValue = getRawCellValue(cell);
          console.log('Raw cell value:', rawValue, 'Type:', columnType);
          
          switch (columnType) {
            case 'numeric':
              const num = parseFloat(rawValue.replace(/[^\d.-]/g, ''));
              return isNaN(num) ? 0 : num;
              
            case 'date':
              const date = new Date(rawValue);
              return isNaN(date.getTime()) ? new Date(0) : date;
              
            case 'text':
            default:
              return rawValue.toLowerCase().trim();
          }
        }
        
        // Compare values based on data type
        function compareValues(a, b, columnType) {
          console.log('Comparing:', a, 'vs', b, 'type:', columnType);
          
          switch (columnType) {
            case 'numeric':
              return a - b;
              
            case 'date':
              return a.getTime() - b.getTime();
              
            case 'text':
            default:
              // For most text columns, simple string comparison is best
              if (a < b) return -1;
              if (a > b) return 1;
              return 0;
          }
        }
        
        // Setup functionality
        setupRowClicking();
        setupSorting();
      });
      
      // Also run on Turbo page loads
      document.addEventListener('turbo:load', function() {
        console.log('Turbo load detected, re-running setup');
        // Small delay to ensure DOM is ready
        setTimeout(function() {
          const event = new Event('DOMContentLoaded');
          document.dispatchEvent(event);
        }, 100);
      });
    </script>
    
    <style>
      /* Admin-specific styles that harmonize with main app */
      
      /* Global Reset and Base Styles - Inherited from main app */
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      html {
        font-size: 16px;
      }

      body {
        font-family: 'Source Sans Pro', sans-serif;
        background-color: #f5f0e8; /* Same parchment base color */
        background-image: url(<%= asset_path 'scholarly-background-v4.svg' %>);
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        color: #3d2c1d; /* Same dark brown text */
        min-height: 100vh;
        line-height: 1.6;
        position: relative;
        overflow-x: hidden;
        display: flex;
        flex-direction: column;
      }

      body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(245, 240, 232, 0.1);
        z-index: -1;
      }

      .page-content {
        flex: 1;
        display: flex;
        flex-direction: column;
      }
      
      /* Admin Header - Following main app pattern */
      .admin-header {
        background: rgba(245, 240, 232, 0.15); /* Slightly more opaque for admin distinction */
        backdrop-filter: blur(2px);
        padding: 1.5rem 2rem;
        border-bottom: 2px solid #8b7355;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      
      .admin-header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1440px;
        margin: 0 auto;
      }
      
      .admin-header h1 {
        font-family: 'Crimson Text', serif;
        font-size: 1.75rem !important;
        color: #3d2c1d;
        margin: 0;
        letter-spacing: -0.025em;
      }
      
      .admin-header-links {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      
      .admin-header-link {
        color: #3d2c1d;
        text-decoration: none;
        font-size: 0.9rem;
        font-weight: 500;
        opacity: 0.8;
        transition: all 0.2s ease;
      }
      
      .admin-header-link:hover {
        opacity: 1;
        color: #8b7355;
      }
      
      /* Admin Navigation - Using auth-link pattern */
      .admin-nav {
        background: rgba(245, 240, 232, 0.1);
        backdrop-filter: blur(1px);
        padding: 1rem 2rem;
        margin-bottom: 2rem;
        border-bottom: 1px solid rgba(139, 115, 85, 0.2);
      }
      
      .admin-nav-content {
        max-width: 1440px;
        margin: 0 auto;
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
      }
      
      .admin-nav-link {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        text-decoration: none;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.2s ease;
        opacity: 0.8;
        font-family: 'Source Sans Pro', sans-serif;
        background: rgba(139, 115, 85, 0.1);
        color: #3d2c1d;
        border: 1px solid #8b7355;
      }
      
      .admin-nav-link:hover,
      .admin-nav-link.active {
        background: rgba(139, 115, 85, 0.2);
        color: #3d2c1d;
        opacity: 1;
      }
      
      /* Container */
      .container {
        max-width: 1440px;
        margin: 0 auto;
        padding: 0 2rem;
      }
      
      /* Alert styles using parchment colors */
      .alert {
        padding: 0.75rem 1rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 6px;
        font-family: 'Source Sans Pro', sans-serif;
      }
      
      .alert-success {
        color: #2d5016;
        background-color: rgba(139, 115, 85, 0.1);
        border-color: #8b7355;
      }
      
      .alert-danger {
        color: #721c24;
        background-color: rgba(114, 28, 36, 0.1);
        border-color: #8b4513;
      }
      
      .alert-warning {
        color: #6b4423;
        background-color: rgba(139, 115, 85, 0.15);
        border-color: #8b7355;
      }
      
      /* Admin content area */
      .admin-content {
        min-height: 60vh;
        flex: 1;
      }
      
      /* Breadcrumb using parchment theme */
      .breadcrumb {
        background: rgba(139, 115, 85, 0.1);
        padding: 0.75rem 1rem;
        margin-bottom: 1rem;
        border-radius: 6px;
        border: 1px solid rgba(139, 115, 85, 0.2);
        font-family: 'Source Sans Pro', sans-serif;
      }
      
      .breadcrumb a {
        color: #8b7355;
        text-decoration: none;
      }
      
      .breadcrumb a:hover {
        color: #3d2c1d;
        text-decoration: underline;
      }

      /* Admin-specific component styles */
      .admin-stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
      }

      .admin-stat-card {
        background: rgba(245, 240, 232, 0.3);
        backdrop-filter: blur(5px);
        padding: 1.5rem;
        border-radius: 8px;
        text-align: center;
        border: 1px solid rgba(139, 115, 85, 0.2);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .admin-stat-card h3 {
        margin: 0;
        color: #3d2c1d;
        font-family: 'Crimson Text', serif;
        font-size: 1.1rem;
      }

      .admin-stat-card .stat-number {
        font-size: 2rem;
        font-weight: bold;
        margin: 0.5rem 0;
        color: #8b7355;
        font-family: 'Source Sans Pro', sans-serif;
      }

      .admin-stat-card .stat-detail {
        color: #3d2c1d;
        opacity: 0.8;
        font-size: 0.9rem;
      }

      .admin-content-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-bottom: 2rem;
      }

      .admin-section {
        background: rgba(245, 240, 232, 0.2);
        backdrop-filter: blur(5px);
        border-radius: 8px;
        padding: 1rem;
        border: 1px solid rgba(139, 115, 85, 0.2);
      }

      .admin-section h2 {
        font-family: 'Crimson Text', serif;
        color: #3d2c1d;
        margin-bottom: 1rem;
        font-size: 1.5rem;
      }

      .admin-item {
        border-bottom: 1px solid rgba(139, 115, 85, 0.2);
        padding: 0.75rem 0;
      }

      .admin-item:last-child {
        border-bottom: none;
      }

      .admin-link {
        color: #8b7355;
        text-decoration: none;
        font-weight: 500;
      }

      .admin-link:hover {
        color: #3d2c1d;
        text-decoration: underline;
      }

      /* Mobile responsiveness */
      @media (max-width: 768px) {
        .admin-header, .admin-nav {
          padding: 1rem 1rem;
        }

        .admin-header-content {
          flex-direction: column;
          gap: 1rem;
        }

        .admin-nav-content {
          justify-content: center;
        }

        .container {
          padding: 0 1rem;
        }

        .admin-content-grid {
          grid-template-columns: 1fr;
        }
      }

      /* Medium screens */
      @media (min-width: 769px) and (max-width: 1199px) {
        .container { padding: 0 1.25rem; }
        .admin-nav { padding: 0.75rem 1.25rem; }
        .admin-header { padding: 1rem 1.25rem; }
      }

      /* Large desktops */
      @media (min-width: 1440px) {
        .container { padding: 0 2.5rem; }
        .admin-nav { padding: 1rem 2.5rem; }
        .admin-header { padding: 1.5rem 2.5rem; }
      }
    </style>
  </head>

  <body>
    <div class="page-content">
      <header class="admin-header">
        <div class="admin-header-content">
          <h1>Admin Dashboard</h1>
          <div class="admin-header-links">
            <span class="admin-header-link">Welcome, <%= current_user.email %></span>
            <span class="admin-header-link">|</span>
            <%= link_to "Back to Site", root_path, class: "admin-header-link" %>
            <span class="admin-header-link">|</span>
            <%= button_to "Logout", destroy_user_session_path, method: :delete, form: { style: "display:inline" }, form_class: "inline", class: "admin-header-link", formnovalidate: true %>
          </div>
        </div>
      </header>
      
      <nav class="admin-nav">
        <div class="admin-nav-content">
          <%= link_to "Dashboard", admin_root_path, class: "admin-nav-link #{'active' if controller_path == 'admin/dashboard'}" %>
          <%= link_to "Quotes", admin_quotes_path, class: "admin-nav-link #{'active' if controller_path == 'admin/quotes'}" %>
          <%= link_to "Users", admin_users_path, class: "admin-nav-link #{'active' if controller_path == 'admin/users'}" %>
          <%= link_to "Tags", admin_tags_path, class: "admin-nav-link #{'active' if controller_path == 'admin/tags'}" %>
          <%= link_to "Comments", admin_comments_path, class: "admin-nav-link #{'active' if controller_path == 'admin/comments'}" %>
          <%= link_to "Analytics", admin_analytics_path, class: "admin-nav-link #{'active' if controller_path == 'admin/analytics'}" %>
          <%= link_to "Activity Log", admin_activity_logs_path, class: "admin-nav-link #{'active' if controller_path == 'admin/activity_logs'}" %>
        </div>
      </nav>

      <main class="container">
        <% if content_for?(:breadcrumb) %>
          <div class="breadcrumb">
            <%= yield(:breadcrumb) %>
          </div>
        <% end %>
        
        <% flash.each do |type, message| %>
          <div class="alert alert-<%= type == 'notice' ? 'success' : type %>">
            <%= message %>
          </div>
        <% end %>
        
        <div class="admin-content">
          <%= yield %>
        </div>
      </main>
    </div>
    
    <footer style="margin-top: 3rem; padding: 2rem 0; background: rgba(245, 240, 232, 0.8); backdrop-filter: blur(10px); border-top: 1px solid rgba(139, 115, 85, 0.3); text-align: center; color: #3d2c1d;">
      <div class="container">
        <p>&copy; <%= Date.current.year %> The Daily Tolkien - Admin Panel</p>
      </div>
    </footer>
  </body>
</html>
